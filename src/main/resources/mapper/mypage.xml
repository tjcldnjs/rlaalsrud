<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.library.bookwave.repository.interfaces.MyPageRepository">

	<update id="updateUserByPassword">
		update user_tb set password = #{password} where id = #{id}
	</update>

	<select id="findUserInfoByuserId" resultType="com.library.bookwave.dto.SignUpDTO">
		select * from user_detail_tb as ud join user_tb as u on u.id = ud.user_id where user_id = #{userId}
	</select>

	<update id="updateAddress">
		update user_detail_tb set zip = #{zip}, addr1 = #{addr1}, addr2 = #{addr2} where user_id= #{userId}
	</update>

	<update id="updatePhone">
		update user_detail_tb set phone = #{phone} where user_id= #{userId}
	</update>

	<delete id="deleteUserDetail">
		DELETE FROM user_detail_tb WHERE user_id = #{userId}
	</delete>

	<delete id="deleteUser">
		DELETE FROM user_tb WHERE id = #{id}
	</delete>

	<select id="findWaveHistory" resultType="com.library.bookwave.dto.BalanceHistoryDTO">
		SELECT id, wave_change, description, created_at
		FROM balance_history_tb
		where user_id = #{userId}
		<if test="sortBy != null">
			ORDER BY
			<choose>
				<when test="sortBy == 'wave'">
					wave_change
				</when>
				<when test="sortBy == 'date'">
					created_at
				</when>
				<otherwise>
					created_at
				</otherwise>
			</choose>
			<choose>
				<when test="sortOrder == 'asc'">
					ASC
				</when>
				<otherwise>
					DESC
				</otherwise>
			</choose>
		</if>
		LIMIT #{limit}
		OFFSET #{offset}
	</select>

	<select id="findMileageHistory" resultType="com.library.bookwave.dto.BalanceHistoryDTO">
		SELECT id, mileage_change, description, created_at
		FROM balance_history_tb
		WHERE user_id = #{userId}
		<if test="sortBy != null">
			ORDER BY
			<choose>
				<when test="sortBy == 'amount'">
					mileage_change
				</when>
				<when test="sortBy == 'date'">
					created_at
				</when>
				<otherwise>
					created_at
				</otherwise>
			</choose>
			<choose>
				<when test="sortOrder == 'asc'">
					ASC
				</when>
				<otherwise>
					DESC
				</otherwise>
			</choose>
		</if>
		LIMIT #{limit}
		OFFSET #{offset}
	</select>

	<select id="findBalanceHistory" resultType="com.library.bookwave.dto.BalanceHistoryDTO">
		SELECT *
		FROM balance_history_tb
		WHERE 
		<choose>
		<when test="historyType =='wave'">
		wave_change != 0
		and
		</when>
		<when test="historyType =='mileage'">
		mileage_change != 0
		and
		</when>
		</choose>
		user_id = #{userId}
		<if test="sortBy != null">
			ORDER BY
			<choose>
				<when test="sortBy == 'mileage'">
					mileage_change
				</when>
				<when test="sortBy == 'wave'">
					wave_change
				</when>
				<when test="sortBy == 'date'">
					created_at
				</when>
			</choose>
			<choose>
				<when test="sortOrder == 'asc'">
					ASC
				</when>
				<otherwise>
					DESC
				</otherwise>
			</choose>
		</if>
		LIMIT #{limit}
		OFFSET #{offset}
	</select>

	<select id="countBalanceHistory" resultType="int">
		<choose>
			<when test="historyType == 'all'">
				select count(*) from balance_history_tb where user_id = #{userId}
			</when>
			<when test="historyType == 'wave'">
				select count(*) from balance_history_tb where wave_change != 0 and user_id = #{userId}
			</when>
			<otherwise>
				select count(*) from balance_history_tb where mileage_change != 0 and user_id = #{userId}
			</otherwise>
		</choose>
	</select>

	<select id="findPaymentByUserId" resultType="com.library.bookwave.dto.Payment2DTO">
		SELECT * FROM PAYMENT_TB where user_id = #{userId}
	</select>
	
	<select id="findPaymentById" resultType="com.library.bookwave.dto.Payment2DTO">
		SELECT * FROM PAYMENT_TB where id = #{id}
	</select>
	
	<update id="updatePayment">
		update payment_tb set cancel_reason = #{cancelReason}, cancel_status = 'REQUEST_CANCEL' where id = #{id}
	</update>

	

</mapper>
